{
  "address": "0x316634942231Fb09Ac2228C35686D65AE3EEb795",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery_NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestCOnfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x91e0150b9a69b6ff6cbd31f0d175bb5f93c5f93995d4db5e43ba1d1639c8c3c1",
  "receipt": {
    "to": null,
    "from": "0xb34cDe61a284205ffeD6Baf0b06F0445336631DC",
    "contractAddress": "0x316634942231Fb09Ac2228C35686D65AE3EEb795",
    "transactionIndex": 8,
    "gasUsed": "1211360",
    "logsBloom": "0x
    "blockHash": "0xd807065e247ac0a45ff14956afd531d509f9b101e65c5f52726f4675a7ecfd34",
    "transactionHash": "0x91e0150b9a69b6ff6cbd31f0d175bb5f93c5f93995d4db5e43ba1d1639c8c3c1",
    "logs": [],
    "blockNumber": 8316024,
    "cumulativeGasUsed": "1827615",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "8610",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "dc1af47d876b9058ffb8ee5bc5dcf3d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery_NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestCOnfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Lottery__NotEnoughETHEntered();\\r\\nerror Lottery__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers,uint256 lotteryState);\\r\\nerror Lottery_NotOpen();\\r\\nerror Lottery__TransferFailed();\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2 ,AutomationCompatibleInterface{\\r\\n\\r\\n    enum LotteryState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    \\r\\n\\r\\n    uint256 private immutable entranceFee;\\r\\n    address payable[] private players;\\r\\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS=3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    address private s_recentWinner;\\r\\n    LotteryState private s_lotteryState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n    \\r\\n\\r\\n\\r\\n    event LotteryEnter(address indexed player);\\r\\n    event RequestedLotteryWinner( uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed player);\\r\\n\\r\\n\\r\\n    constructor (address vrfCoordinatorV2,\\r\\n    uint256 entryFee,\\r\\n    bytes32 gasLane,\\r\\n    uint64 subscriptionId,\\r\\n    uint32 callbackGasLimit, uint256 interval) \\r\\n    VRFConsumerBaseV2(vrfCoordinatorV2){\\r\\n        entranceFee = entryFee;\\r\\n        vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit= callbackGasLimit;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n\\r\\n    function enterLottery() public payable {\\r\\n        if(msg.value < entranceFee){\\r\\n            revert Lottery__NotEnoughETHEntered();\\r\\n\\r\\n        }\\r\\n        if(s_lotteryState != LotteryState.OPEN){\\r\\n            revert Lottery_NotOpen();\\r\\n        }\\r\\n        players.push(payable(msg.sender));\\r\\n        emit LotteryEnter(msg.sender);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function checkUpkeep(bytes memory /*checkdata*/\\r\\n    ) public override returns (bool upkeepNeeded, bytes memory /*PerformData*/) {\\r\\n        bool isOpen = (LotteryState.OPEN== s_lotteryState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp)> i_interval);\\r\\n        bool hasPlayers = (players.length>0);\\r\\n        bool hasBalance = address(this).balance>0;\\r\\n        upkeepNeeded = (timePassed&&isOpen && hasBalance && hasPlayers);\\r\\n        // return (upkeepNeeded,\\\"0x00\\\");\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function performUpkeep(bytes calldata /*performData*/) external override{\\r\\n        (bool upkeepNeeded,) = checkUpkeep(\\\" \\\");\\r\\n        if(!upkeepNeeded){\\r\\n            revert Lottery__UpkeepNotNeeded(address(this).balance, players.length,uint256( s_lotteryState));\\r\\n        }\\r\\n        s_lotteryState = LotteryState.CALCULATING;\\r\\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedLotteryWinner(requestId);\\r\\n\\r\\n    }\\r\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % players.length;\\r\\n        address payable recentWinner = players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        s_lotteryState = LotteryState.OPEN;\\r\\n        players = new address payable[](0);\\r\\n        (bool success,) = recentWinner.call{value:address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Lottery__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return entranceFee;\\r\\n    }\\r\\n    function getPlayer(uint256 index)public view returns (address ){\\r\\n        return players[index];\\r\\n    }\\r\\n    function  getRecentWinner() public view returns(address){\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n    function getLotteryState() public view returns (LotteryState){\\r\\n        return s_lotteryState;\\r\\n    }\\r\\n    function getNumWords() public pure returns (uint256){\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n    function getNumberOfPlayers() public view returns (uint256){\\r\\n        return players.length;\\r\\n    }\\r\\n    function getLatestTimeStamp() public view returns (uint256){\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n    function getRequestCOnfirmations() public pure returns (uint256){\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns(uint256){\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xe40396f12b264ab0881958f86ef72f142367d84d76ea475aa2177dbcce2fdd61\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200182838038062001828833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611459620003cf6000396000818161069101526106ff015260006105450152600061052201526000610501015260006104c50152600081816102fa0152610725015260008181610320015261037401526114596000f3fe6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af578514610259578063c6fa6edb14610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806391ad27b41461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610be3565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d97565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610be3565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e4e565b6103e8565b005b34801561017b57600080fd5b506101846105fe565b6040516101919190610edc565b60405180910390f35b3480156101a657600080fd5b506101af610628565b6040516101bc9190610be3565b60405180910390f35b3480156101d157600080fd5b506101da610637565b6040516101e79190610f6e565b60405180910390f35b3480156101fc57600080fd5b506102176004803603810190610212919061103e565b61064e565b604051610225929190611121565b60405180910390f35b34801561023a57600080fd5b506102436106fb565b6040516102509190610be3565b60405180910390f35b610261610723565b005b34801561026f57600080fd5b50610278610892565b6040516102859190610be3565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611151565b61089f565b6040516102c29190610edc565b60405180910390f35b3480156102d757600080fd5b506102e06108e6565b6040516102ed9190610be3565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061117e565b60405180910390fd5b6103da82826108f2565b5050565b6000600254905090565b60006104286040518060400160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525061064e565b509050806104975747600080549050600160149054906101000a900460ff16600181111561045957610458610ef7565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161048e939291906111a7565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104bc576104bb610ef7565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610586959493929190611256565b6020604051808303816000875af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c991906112be565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561067657610675610ef7565b5b6000600181111561068a57610689610ef7565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106be919061131a565b119050600080600080549050119050600080471190508280156106de5750835b80156106e75750805b80156106f05750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561077d576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561079157610790610ef7565b5b600160149054906101000a900460ff1660018111156107b3576107b2610ef7565b5b146107ea576040517f732acd4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000600361ffff16905090565b60008082815481106108b4576108b361134e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061090d5761090c61134e565b5b602002602001015161091f91906113ac565b905060008082815481106109365761093561134e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002819055506000600160146101000a81548160ff021916908360018111156109d1576109d0610ef7565b5b0217905550600067ffffffffffffffff8111156109f1576109f0610c54565b5b604051908082528060200260200182016040528015610a1f5781602001602082028036833780820191505090505b5060009080519060200190610a35929190610b23565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a5c9061140e565b60006040518083038185875af1925050503d8060008114610a99576040519150601f19603f3d011682016040523d82523d6000602084013e610a9e565b606091505b5050905080610ad9576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b9c579160200282015b82811115610b9b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b43565b5b509050610ba99190610bad565b5090565b5b80821115610bc6576000816000905550600101610bae565b5090565b6000819050919050565b610bdd81610bca565b82525050565b6000602082019050610bf86000830184610bd4565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1b81610bca565b8114610c2657600080fd5b50565b600081359050610c3881610c12565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8c82610c43565b810181811067ffffffffffffffff82111715610cab57610caa610c54565b5b80604052505050565b6000610cbe610bfe565b9050610cca8282610c83565b919050565b600067ffffffffffffffff821115610cea57610ce9610c54565b5b602082029050602081019050919050565b600080fd5b6000610d13610d0e84610ccf565b610cb4565b90508083825260208201905060208402830185811115610d3657610d35610cfb565b5b835b81811015610d5f5780610d4b8882610c29565b845260208401935050602081019050610d38565b5050509392505050565b600082601f830112610d7e57610d7d610c3e565b5b8135610d8e848260208601610d00565b91505092915050565b60008060408385031215610dae57610dad610c08565b5b6000610dbc85828601610c29565b925050602083013567ffffffffffffffff811115610ddd57610ddc610c0d565b5b610de985828601610d69565b9150509250929050565b600080fd5b60008083601f840112610e0e57610e0d610c3e565b5b8235905067ffffffffffffffff811115610e2b57610e2a610df3565b5b602083019150836001820283011115610e4757610e46610cfb565b5b9250929050565b60008060208385031215610e6557610e64610c08565b5b600083013567ffffffffffffffff811115610e8357610e82610c0d565b5b610e8f85828601610df8565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec682610e9b565b9050919050565b610ed681610ebb565b82525050565b6000602082019050610ef16000830184610ecd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f3757610f36610ef7565b5b50565b6000819050610f4882610f26565b919050565b6000610f5882610f3a565b9050919050565b610f6881610f4d565b82525050565b6000602082019050610f836000830184610f5f565b92915050565b600080fd5b600067ffffffffffffffff821115610fa957610fa8610c54565b5b610fb282610c43565b9050602081019050919050565b82818337600083830152505050565b6000610fe1610fdc84610f8e565b610cb4565b905082815260208101848484011115610ffd57610ffc610f89565b5b611008848285610fbf565b509392505050565b600082601f83011261102557611024610c3e565b5b8135611035848260208601610fce565b91505092915050565b60006020828403121561105457611053610c08565b5b600082013567ffffffffffffffff81111561107257611071610c0d565b5b61107e84828501611010565b91505092915050565b60008115159050919050565b61109c81611087565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110dc5780820151818401526020810190506110c1565b60008484015250505050565b60006110f3826110a2565b6110fd81856110ad565b935061110d8185602086016110be565b61111681610c43565b840191505092915050565b60006040820190506111366000830185611093565b818103602083015261114881846110e8565b90509392505050565b60006020828403121561116757611166610c08565b5b600061117584828501610c29565b91505092915050565b60006040820190506111936000830185610ecd565b6111a06020830184610ecd565b9392505050565b60006060820190506111bc6000830186610bd4565b6111c96020830185610bd4565b6111d66040830184610bd4565b949350505050565b6000819050919050565b6111f1816111de565b82525050565b600067ffffffffffffffff82169050919050565b611214816111f7565b82525050565b600061ffff82169050919050565b6112318161121a565b82525050565b600063ffffffff82169050919050565b61125081611237565b82525050565b600060a08201905061126b60008301886111e8565b611278602083018761120b565b6112856040830186611228565b6112926060830185611247565b61129f6080830184611247565b9695505050505050565b6000815190506112b881610c12565b92915050565b6000602082840312156112d4576112d3610c08565b5b60006112e2848285016112a9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132582610bca565b915061133083610bca565b9250828203905081811115611348576113476112eb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b782610bca565b91506113c283610bca565b9250826113d2576113d161137d565b5b828206905092915050565b600081905092915050565b50565b60006113f86000836113dd565b9150611403826113e8565b600082019050919050565b6000611419826113eb565b915081905091905056fea2646970667358221220ecf6d961b0684582c399d62f9e0da663f187c709851f04a2717f25b4f3fa899364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af578514610259578063c6fa6edb14610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806391ad27b41461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610be3565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d97565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610be3565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e4e565b6103e8565b005b34801561017b57600080fd5b506101846105fe565b6040516101919190610edc565b60405180910390f35b3480156101a657600080fd5b506101af610628565b6040516101bc9190610be3565b60405180910390f35b3480156101d157600080fd5b506101da610637565b6040516101e79190610f6e565b60405180910390f35b3480156101fc57600080fd5b506102176004803603810190610212919061103e565b61064e565b604051610225929190611121565b60405180910390f35b34801561023a57600080fd5b506102436106fb565b6040516102509190610be3565b60405180910390f35b610261610723565b005b34801561026f57600080fd5b50610278610892565b6040516102859190610be3565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611151565b61089f565b6040516102c29190610edc565b60405180910390f35b3480156102d757600080fd5b506102e06108e6565b6040516102ed9190610be3565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c792919061117e565b60405180910390fd5b6103da82826108f2565b5050565b6000600254905090565b60006104286040518060400160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525061064e565b509050806104975747600080549050600160149054906101000a900460ff16600181111561045957610458610ef7565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161048e939291906111a7565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104bc576104bb610ef7565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610586959493929190611256565b6020604051808303816000875af11580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c991906112be565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561067657610675610ef7565b5b6000600181111561068a57610689610ef7565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106be919061131a565b119050600080600080549050119050600080471190508280156106de5750835b80156106e75750805b80156106f05750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561077d576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561079157610790610ef7565b5b600160149054906101000a900460ff1660018111156107b3576107b2610ef7565b5b146107ea576040517f732acd4a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000600361ffff16905090565b60008082815481106108b4576108b361134e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061090d5761090c61134e565b5b602002602001015161091f91906113ac565b905060008082815481106109365761093561134e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426002819055506000600160146101000a81548160ff021916908360018111156109d1576109d0610ef7565b5b0217905550600067ffffffffffffffff8111156109f1576109f0610c54565b5b604051908082528060200260200182016040528015610a1f5781602001602082028036833780820191505090505b5060009080519060200190610a35929190610b23565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a5c9061140e565b60006040518083038185875af1925050503d8060008114610a99576040519150601f19603f3d011682016040523d82523d6000602084013e610a9e565b606091505b5050905080610ad9576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b9c579160200282015b82811115610b9b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b43565b5b509050610ba99190610bad565b5090565b5b80821115610bc6576000816000905550600101610bae565b5090565b6000819050919050565b610bdd81610bca565b82525050565b6000602082019050610bf86000830184610bd4565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1b81610bca565b8114610c2657600080fd5b50565b600081359050610c3881610c12565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8c82610c43565b810181811067ffffffffffffffff82111715610cab57610caa610c54565b5b80604052505050565b6000610cbe610bfe565b9050610cca8282610c83565b919050565b600067ffffffffffffffff821115610cea57610ce9610c54565b5b602082029050602081019050919050565b600080fd5b6000610d13610d0e84610ccf565b610cb4565b90508083825260208201905060208402830185811115610d3657610d35610cfb565b5b835b81811015610d5f5780610d4b8882610c29565b845260208401935050602081019050610d38565b5050509392505050565b600082601f830112610d7e57610d7d610c3e565b5b8135610d8e848260208601610d00565b91505092915050565b60008060408385031215610dae57610dad610c08565b5b6000610dbc85828601610c29565b925050602083013567ffffffffffffffff811115610ddd57610ddc610c0d565b5b610de985828601610d69565b9150509250929050565b600080fd5b60008083601f840112610e0e57610e0d610c3e565b5b8235905067ffffffffffffffff811115610e2b57610e2a610df3565b5b602083019150836001820283011115610e4757610e46610cfb565b5b9250929050565b60008060208385031215610e6557610e64610c08565b5b600083013567ffffffffffffffff811115610e8357610e82610c0d565b5b610e8f85828601610df8565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec682610e9b565b9050919050565b610ed681610ebb565b82525050565b6000602082019050610ef16000830184610ecd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f3757610f36610ef7565b5b50565b6000819050610f4882610f26565b919050565b6000610f5882610f3a565b9050919050565b610f6881610f4d565b82525050565b6000602082019050610f836000830184610f5f565b92915050565b600080fd5b600067ffffffffffffffff821115610fa957610fa8610c54565b5b610fb282610c43565b9050602081019050919050565b82818337600083830152505050565b6000610fe1610fdc84610f8e565b610cb4565b905082815260208101848484011115610ffd57610ffc610f89565b5b611008848285610fbf565b509392505050565b600082601f83011261102557611024610c3e565b5b8135611035848260208601610fce565b91505092915050565b60006020828403121561105457611053610c08565b5b600082013567ffffffffffffffff81111561107257611071610c0d565b5b61107e84828501611010565b91505092915050565b60008115159050919050565b61109c81611087565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110dc5780820151818401526020810190506110c1565b60008484015250505050565b60006110f3826110a2565b6110fd81856110ad565b935061110d8185602086016110be565b61111681610c43565b840191505092915050565b60006040820190506111366000830185611093565b818103602083015261114881846110e8565b90509392505050565b60006020828403121561116757611166610c08565b5b600061117584828501610c29565b91505092915050565b60006040820190506111936000830185610ecd565b6111a06020830184610ecd565b9392505050565b60006060820190506111bc6000830186610bd4565b6111c96020830185610bd4565b6111d66040830184610bd4565b949350505050565b6000819050919050565b6111f1816111de565b82525050565b600067ffffffffffffffff82169050919050565b611214816111f7565b82525050565b600061ffff82169050919050565b6112318161121a565b82525050565b600063ffffffff82169050919050565b61125081611237565b82525050565b600060a08201905061126b60008301886111e8565b611278602083018761120b565b6112856040830186611228565b6112926060830185611247565b61129f6080830184611247565b9695505050505050565b6000815190506112b881610c12565b92915050565b6000602082840312156112d4576112d3610c08565b5b60006112e2848285016112a9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061132582610bca565b915061133083610bca565b9250828203905081811115611348576113476112eb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b782610bca565b91506113c283610bca565b9250826113d2576113d161137d565b5b828206905092915050565b600081905092915050565b50565b60006113f86000836113dd565b9150611403826113e8565b600082019050919050565b6000611419826113eb565b915081905091905056fea2646970667358221220ecf6d961b0684582c399d62f9e0da663f187c709851f04a2717f25b4f3fa899364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 203,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 223,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)198"
      },
      {
        "astId": 225,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)198": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}